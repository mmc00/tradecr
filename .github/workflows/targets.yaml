# MIT License
# Copyright (c) 2021 Eli Lilly and Company
# Author: William Michael Landau (will.landau at gmail)
# Written with help from public domain (CC0 1.0 Universal) workflow files by Jim Hester:
# * https://github.com/r-lib/actions/blob/master/examples/check-full.yaml
# * https://github.com/r-lib/actions/blob/master/examples/blogdown.yaml
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

on:
  # workflow_run:
  #   workflows: ["chrome"]
  #   types:
      # - completed
  # schedule:
  #   - cron: "0 * * * *"
  push:
    branches:
      - main
      - master

name: targets

jobs:
  targets:
    runs-on: ubuntu-latest
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      RENV_PATHS_ROOT: ~/.local/share/renv
      TEMP_PATH: ./temp
      DRIVER_PATH: /usr/local/bin/
    steps:
      - uses: browser-actions/setup-chrome@latest
      - name: Set up Chrome
        run: chrome --version

      - name: Chrome driver
        run: |
          CHROME_VERSION=$(google-chrome --version | cut -f 3 -d ' ' | cut -d '.' -f 1) \
          && CHROMEDRIVER_RELEASE=$(curl --location --fail --retry 3 http://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROME_VERSION}) \
          && curl --silent --show-error --location --fail --retry 3 --output /tmp/chromedriver_linux64.zip "http://chromedriver.storage.googleapis.com/$CHROMEDRIVER_RELEASE/chromedriver_linux64.zip" \
          && cd /tmp \
          && unzip chromedriver_linux64.zip \
          && rm -rf chromedriver_linux64.zip \
          && sudo mkdir -p $DRIVER_PATH \
          && sudo mv chromedriver $DRIVER_PATH \
          && sudo chmod +rwx $DRIVER_PATH \
          && chromedriver --version \
          && ls -R $DRIVER_PATH
        shell: bash

      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      
      - name: Check if previous runs exists
        id: runs-exist
        run: git ls-remote --exit-code --heads origin targets-runs
        continue-on-error: true

      - name: Checkout previous run
        if: steps.runs-exist.outcome == 'success'
        uses: actions/checkout@v2
        with:
          ref: targets-runs
          fetch-depth: 1
          path: .targets-runs

      - name: Setting python
        run: |
          sudo python -m pip install --upgrade pip
          sudo pip install selenium

      - name: List files 0
        run:
          sudo ls -l ${TEMP_PATH}
        env: 
          TEMP_PATH: ./temp

      - name: Setting up for temp and data folder
        run:
          sudo rm -rf ${TEMP_PATH} \
          && sudo mkdir ${TEMP_PATH} \
          && sudo chmod +rwx ${TEMP_PATH} \
          && sudo mkdir -p ${DATA_PATH} \
          && sudo chmod +rwx ${DATA_PATH} 
        env: 
          TEMP_PATH: ./temp
          DATA_PATH: ./data
      
      - name: Python Procomer by country
        run: 
          sudo -E python ./python/proco_pais.py \
          && sudo -E mv ${TEMP_PATH}/PivotGrid.xls ${TEMP_PATH}/con_data_`date '+%Y_%m_%d__%H_%M_%S'`.xls
        env:
          TEMP_PATH: ./temp
          DRIVER_PATH: /usr/local/bin/chromedriver

      - name: Python Procomer by chapter
        run: 
          sudo -E python ./python/proco_capi.py \
          && sudo -E mv ${TEMP_PATH}/PivotGrid.xls ${TEMP_PATH}/cap_data_`date '+%Y_%m_%d__%H_%M_%S'`.xls
        env:
          TEMP_PATH: ./temp
          DRIVER_PATH: /usr/local/bin/chromedriver 
      
      - name: Install Linux system dependencies 4 targets and telegram
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install libcurl4-openssl-dev
          sudo apt-get install libssl-dev
          sudo apt-get install libzmq3-dev
          sudo pip install python-telegram-bot

      - name: Cache packages
        uses: actions/cache@v2
        with:
          path: ${{ env.RENV_PATHS_ROOT }}
          key: ${{ runner.os }}-renv-${{ hashFiles('**/renv.lock') }}
          restore-keys: ${{ runner.os }}-renv-

      - name: Restore packages
        shell: sudo -E Rscript {0}
        run: |
          if (!requireNamespace("renv", quietly = TRUE)) install.packages("renv")
          renv::restore()

      - name: List files 1
        run:
          sudo ls -l ${TEMP_PATH}
        env: 
          TEMP_PATH: ./temp
        
      - name: Restore output files from the previous run
        if: steps.runs-exist.outcome == 'success'
        run: |
            nfiles <- scan(".targets-runs/.targets-files", what = character())
            nfiles <- nfiles[!grepl("temp/", nfiles)]
            for (dest in nfiles) {
              source <- file.path(".targets-runs", dest)
              if (!file.exists(dirname(dest))) dir.create(dirname(dest), recursive = TRUE)
              if (file.exists(source)) file.rename(source, dest)
              }
        shell: sudo -E Rscript {0}

      - name: List files 2
        run:
          sudo ls -l ${TEMP_PATH}
        env: 
          TEMP_PATH: ./temp
      
      - name: Run targets pipeline
        run: targets::tar_make()
        shell: sudo -E Rscript {0}

      - name: Identify files that the targets pipeline produced
        run:
          git ls-files -mo --exclude=renv > .targets-files

      - name: Create the runs branch if it does not already exist
        if: steps.runs-exist.outcome != 'success'
        run: git checkout --orphan targets-runs

      - name: Put the worktree in the runs branch if the latter already exists
        if: steps.runs-exist.outcome == 'success'
        run: |
          rm -r .git
          mv .targets-runs/.git .
          rm -r .targets-runs

      - name: Upload latest run
        run: |
          git config --local user.name "GitHub Actions"
          git config --local user.email "actions@github.com"
          rm -r .gitignore .github/workflows
          git add --all -- ':!renv'
          for file in $(git ls-files -mo --exclude=renv)
          do
            git add $file
          done
          git commit -am "Run pipeline"
          git push origin targets-runs

      # - name: Prepare failure artifact
      #   if: failure()
      #   run: rm -rf .git .github .targets-files .targets-runs

      # - name: Post failure artifact
      #   if: failure()
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: ${{ runner.os }}-r${{ matrix.config.r }}-results
      #     path: .
